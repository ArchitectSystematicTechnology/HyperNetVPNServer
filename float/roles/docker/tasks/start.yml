---

#- set_fact:
#    service: "{{ services[item.service] }}"
#    container: "{{ item.container }}"
#    systemd_service: "docker-{{ item.tag }}"
#    container_user: "docker-{{ item.service }}"

- name: Create container runtime primary groups
  group:
    name: "docker-{{ item.service }}"
  loop: "{{ float_enabled_containers }}"

- name: Create container users
  user:
    name: "docker-{{ item.service }}"
    group: "docker-{{ item.service }}"
    home: "/var/empty"
    createhome: false
  loop: "{{ float_enabled_containers }}"

- name: Add container user to the credentials groups
  user:
    name: "docker-{{ item.service }}"
    groups: "{{ services[item.service].service_credentials | default([]) | map(attribute='name') | map('regex_replace', '^(.*)$', '\\1-credentials') | list }}"
    append: true
  loop: "{{ float_enabled_containers }}"

# TODO: get rid of this once the existing environments have been updated!
- name: Remove obsolete container environment files
  file:
    path: "/etc/default/{{ item.service }}-{{ item.container.name }}"
    state: absent
  loop: "{{ float_enabled_containers }}"

- name: Create run scripts
  template:
    src: run.sh.j2
    dest: "/usr/lib/float/docker/run-{{ item.service }}-{{ item.container.name }}.sh"
    mode: 0755
  register: docker_systemd_run_script
  loop: "{{ float_enabled_containers }}"

- name: Set up the systemd units
  template:
    src: systemd.j2
    dest: "/etc/systemd/system/docker-{{ item.tag }}.service"
  register: docker_systemd_unit
  loop: "{{ float_enabled_containers }}"

# Pull the container image, and start/restart the associated systemd
# unit. If there are errors, we don't abort the entire playbook, but
# simply skip restarting the service.
#
# Due to the lack of parametrized handlers, we'll just notify systemd
# right away.  Always bump the service if the systemd unit changes.
- name: Set up the services
  block:

    - name: Pull the container images
      command: "float-pull-image {{ item.container.image }}"
      register: container_image
      loop: "{{ float_enabled_containers }}"
      changed_when: "container_image.rc == 0"
      failed_when: "container_image.rc not in [0, 42]"

    - name: Start the systemd units
      systemd:
        name: "docker-{{ item.0.tag }}.service"
        daemon_reload: "{{ item.2 is changed }}"
        state: "{{ 'restarted' if (item.1.changed or item.2.changed or item.3.changed) else 'started' }}"
        enabled: yes
        masked: no
        no_block: yes
      #changed_when: false
      loop: "{{ float_enabled_containers | zip(docker_systemd_run_script.results, docker_systemd_unit.results, container_image.results) | list }}"
  rescue:
    - debug:
        msg: "Failed to set up one or more containers"

# If resource limits are set for a container, create some related
# metrics to be exported to Prometheus.
- name: Export resource limits to monitoring
  template:
    src: container-limits.j2
    dest: "/var/lib/prometheus/node-exporter/container_resources.prom"

- name: Remove legacy container resource node-exporter files
  file:
    path: "/var/lib/prometheus/node-exporter/container-*.prom"
    state: absent

