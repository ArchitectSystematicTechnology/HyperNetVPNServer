# Snippet to be included at the "server" level.
# Defines parameters common to all public top-level sites.

{% if nginx_custom_error_pages %}
# Serve our custom error pages.
location /__errors {
  root /var/www/html;
  allow all;
  internal;
}
# Needed otherwise the image-caching directives for noblogs take precedence.
location ~* ^/__errors/(.*\.png)$ {
  alias /var/www/html/__errors/$1;
}

error_page 500 /__errors/500.html;
error_page 502 /__errors/502.html;
error_page 503 /__errors/503.html;
error_page 504 /__errors/504.html;
error_page 429 /__errors/429.html;
error_page 451 /__errors/451.html;
{% endif %}

# Global rate limits for the entire site (to protect backends).
limit_req zone=perip burst={{ nginx_limit_perip_burst }};
limit_req zone=perserver burst={{ nginx_limit_perserver_burst }};

# Add a X-Cache-Status header.
add_header X-Cache-Status $upstream_cache_status;

# Enable HSTS.
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

# Enable NEL and other reports.
add_header Report-To "{\"group\": \"default\", \"max_age\": 86400, \"endpoints\": [{\"url\": \"https://live-reports.{{ domain_public[0] }}/ingest/v1\"}]}" always;
add_header NEL "{\"report_to\": \"default\", \"max_age\": 86400, \"failure_fraction\": {{ nel_failure_fraction | default(0.1) }}, \"success_fraction\": 0.0}" always;

{% for hdr, value in nginx_global_custom_headers | default({}) | dictsort %}
add_header {{ hdr }} {{ value | quote }} always;
{% endfor %}

{% if nginx_override_favicon %}
# Serve our favicon.
location = /favicon.ico {
        expires 15d;
        root /var/www/html;
}
{% endif %}

# Block external access to /server-status handlers.
location = /server-status {
        return 404;
}

# Add services that handle well-known URLs.
{% for service_name, service in services | dictsort %}
{% for ep in service.get('horizontal_endpoints', []) %}
location = {{ ep.path }} {
        return 301 {{ ep.path }}/;
}
location {{ ep.path }}/ {
        include /etc/nginx/snippets/proxy.conf;
{% if ep.get('scheme', 'http') == 'http' %}
        proxy_pass http://{{ ep.float_upstream_name }};
{% else %}
        include /etc/nginx/snippets/proxy-ssl.conf;
        proxy_ssl_name {{ float_http_upstreams[ep.float_upstream_name].service_name }}.{{ domain }};
        proxy_pass https://{{ ep.float_upstream_name }};
{% endif %}
}
{% endfor %}
{% endfor %}
