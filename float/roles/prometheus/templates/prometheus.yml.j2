{# Generate static targets for hosts in an Ansible group #}
{% macro targets_for_group(group, port) %}
      - targets:
{% for host in groups[group]|sort %}
          - "{{ host }}:{{ port }}"
{% endfor %}
{% endmacro %}

{# Generate static targets for hosts in an float service #}
{% macro targets_for_service(group, service_name, port) %}
      - targets:
{% for host in groups[group]|sort %}
          - "{{ host }}.{{ service_name }}.{{ domain }}:{{ port }}"
{% endfor %}
{% endmacro %}

{# Generate a static_configs entry for a scrape config #}
{% macro static_configs_for_group(group, port, service_name='') %}
    static_configs:
{% if service_name %}
{{ targets_for_service(group, service_name, port) }}
        labels:
          service: "{{ service_name }}"
{% else %}
{{ targets_for_group(group, port) }}
{% endif %}
    relabel_configs:
      - source_labels: [__address__]
        target_label: host
        regex: "([^.]*).*:[0-9]+"
        replacement: "${1}"
{% endmacro %}

{# Simple group-based job scrape config #}
{% macro job_static_config(job_name, group, port) %}
  - job_name: "{{ job_name }}"
{{ static_configs_for_group(group, port) }}
{% endmacro %}

{# Job scrape config for a float service. #}
{% macro job_service_config(service_name, target_config) %}
  - job_name: "{{ target_config.get('job_name', service_name) }}"
    scheme: "{{ target_config.get('scheme', 'https') }}"
{% if target_config.get('metrics_path') %}
    metrics_path: "{{ target_config['metrics_path'] }}"
{% endif %}
{% if target_config.get('scheme', 'https') == 'https' %}
    tls_config:
      ca_file: /etc/credentials/x509/prometheus/ca.pem
      cert_file: /etc/credentials/x509/prometheus/client/cert.pem
      key_file: /etc/credentials/x509/prometheus/client/private_key.pem
{% endif %}
{{ static_configs_for_group(target_config.get('group', service_name), target_config.port, service_name) }}
{% endmacro %}

global:
  scrape_interval: "10s"

  # Set an external label unique to this host, but remove it
  # from the generated alerts so that they match across all
  # Prometheus instances.
  external_labels:
    monitor: "{{ inventory_hostname }}"

alerting:
  alert_relabel_configs:
    - regex: monitor
      action: labeldrop
  alertmanagers:
    - static_configs:
{{ targets_for_service('prometheus', 'prometheus', 9093) }}

scrape_configs:
{{ job_static_config('cgroups-exporter', 'all', 3909) }}
{{ job_static_config('mtail', 'all', 3903) }}
{{ job_static_config('rsyslog', 'all', 9106) }}

{# Only scrape the backup agents if backup is configured! #}
{% if backup_repository_restic_password|default(False) %}
{{ job_static_config('backup-agent', 'all', 5331) }}
{% endif %}

{# The configuration for the node exporter drops some metrics with large cardinality. #}
{{ job_static_config('node', 'all', 9100) }}
    metric_relabel_configs:
      - source_labels: [name]
        regex: ".*\\.(path|scope|slice|socket|target|timer)"
        action: drop


{# Iterate over monitoring endpoints of all services. #}
{% for service_name, service in services | dictsort %}
  {%- for target_config in service.get('monitoring_endpoints', []) %}
{{ job_service_config(service_name, target_config) }}
  {%- endfor %}
{% endfor %}


{# Blackbox probes #}
{% for prober_host in groups['prometheus']|sort %}
{% set prober_idx = loop.index %}

  - job_name: "prober_ping_{{ loop.index }}"
    metrics_path: "/probe"
    params:
      module: [ping]
    relabel_configs:
      - source_labels: [__address__]
        target_label: target
        regex: "([^.]*).*"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.prometheus.{{ domain }}:9115
      - target_label: host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{% for host in groups['all']|sort %}
        - "{{ host }}"
{% endfor %}
        labels:
          zone: internal
          probe: ping
          probeset: base

  - job_name: "prober_https_{{ prober_idx }}"
    metrics_path: "/probe"
    params:
      module:
        - http_base
    relabel_configs:
      - source_labels: [__address__]
        target_label: target
        regex: "https?://([^.:/]*).*"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.prometheus.{{ domain }}:9115
      - target_label: host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{% for host in groups['frontend']|sort %}
        - "https://{{ host }}/"
{% endfor %}
        labels:
          zone: public
          probe: https
          probeset: base

{% for probe_type, custom_probes in prometheus_custom_blackbox_probes | dictsort %}
{% for custom_probe in custom_probes %}
{% if probe_type == 'http' %}
  - job_name: "prober_https_{{ custom_probe.name }}_{{ prober_idx }}"
    metrics_path: "/probe"
    params:
      module:
        - http_{{ custom_probe.name }}
    relabel_configs:
      - source_labels: [__address__]
        target_label: target
        regex: "https?://([^.:/]*).*"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.prometheus.{{ domain }}:9115
      - target_label: host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{% for host in groups[custom_probe.get('service', 'frontend')]|sort %}
        - "https://{{ host }}{{ custom_probe.get('path', '/') }}"
{% endfor %}
        labels:
          zone: public
          probe: https_{{ custom_probe.name }}
          probeset: custom

{% else %}
  - job_name: "prober_{{ probe_type }}_{{ custom_probe.name }}_{{ prober_idx }}"
    metrics_path: "/probe"
    params:
      module:
        - {{ probe_type }}
    relabel_configs:
      - source_labels: [__address__]
        target_label: target
        regex: "([^:]*):.*"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.prometheus.{{ domain }}:9115
      - target_label: host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{% if custom_probe.get('hosts') %}
{% for host in custom_probe.get('hosts')|sort %}
        - "{{ host }}:{{ custom_probe.port }}"
{% endfor %}
{% else %}
{% for host in groups[custom_probe.get('service', 'frontend')]|sort %}
        - "{{ host }}:{{ custom_probe.port }}"
{% endfor %}
{% endif %}
        labels:
          zone: public
          probe: {{ probe_type }}_{{ custom_probe.name }}
          probeset: custom

{% endif %}
{% endfor %}
{% endfor %}

  - job_name: "prober_dns_{{ prober_idx }}"
    metrics_path: "/probe"
    params:
      module: [dns_toplevel]
    relabel_configs:
      - source_labels: [__address__]
        target_label: target
        regex: "([^.]*).*"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.prometheus.{{ domain }}:9115
      - target_label: host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{% for host in groups['frontend']|sort %}
        - "{{ host }}"
{% endfor %}
        labels:
          zone: public
          probe: dns
          probeset: base

{% endfor %}

{# External targets #}
{% for target in prometheus_external_targets|default([])|sort(attribute='name') %}
  - job_name: "{{ target.name }}"
    scheme: "{{ target.scheme | default('http') }}"
    metrics_path: "{{ target.metrics_path | default('/metrics') }}"
    static_configs:
      - targets: {{ target.targets | to_json }}
        labels:
          zone: external
    relabel_configs:
      - source_labels: [__address__]
        target_label: host
        regex: "([^.]*).*:[0-9]+"
        replacement: "${1}"
{% endfor %}

rule_files:
  - /etc/prometheus/rules/*.yml

