#!/usr/bin/env python3

from __future__ import print_function

import argparse
import jinja2
import os
import random
import shutil
import subprocess
import sys
import yaml


# Find the root ai3/float source directory.
SRCDIR = os.path.dirname(__file__)
if not SRCDIR:
    SRCDIR = os.getcwd()

# Seed the RNG.
random.seed(os.urandom(16))

VAGRANTFILE_TEMPLATE = '''
require 'yaml'

# Load hosts from the float inventory.
hosts = YAML.load_file("hosts.yml")["hosts"]

# Try to generate a unique network name for libvirt.
network_name = "float-net-"
network_name += Dir.pwd.split('/')[-1]
if !ENV["CI_JOB_ID"].nil?
  network_name += "-#{ENV['CI_JOB_ID']}"
end

Vagrant.configure(2) do |config|
  config.vm.box = "debian/{{ config.float_debian_dist }}64"

  # Use the old insecure Vagrant SSH key for access.
  config.ssh.insert_key = false

  # Disable synchronization of the /vagrant folder for faster startup.
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific customizations.
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--memory", "{{ ram }}"]
  end
  config.vm.provider :libvirt do |libvirt|
    libvirt.cpus = 1
    libvirt.memory = {{ ram }}
    libvirt.random_hostname = true
    libvirt.cpu_mode = 'host-passthrough'
    libvirt.volume_cache = 'unsafe'
{% if libvirt.remote_host %}
    libvirt.host = "{{ libvirt.remote_host }}"
    libvirt.username = "{{ libvirt.remote_user }}"
    libvirt.connect_via_ssh = true
{% if libvirt.ssh_key_file %}
    libvirt.id_ssh_key_file = "{{ libvirt.ssh_key_file }}"
{% endif %}
{% endif %}
  end

  hosts.each do |hostname, hostvars|
    config.vm.define hostname do |m|
      m.vm.hostname = hostname
      m.vm.network "private_network", ip: hostvars["ip"], libvirt__dhcp_enabled: false, libvirt__network_name: network_name
    end
  end
end
'''

ANSIBLE_CFG_TEMPLATE = '''
{% for section, vars in ansible_cfg | dictsort %}
[{{ section }}]
{%- for key, value in vars | dictsort %}
{{ key }} = {{ value }}
{%- endfor %}
{% endfor %}
'''

# Skeleton directories that should be created.
SKEL_DIRS = [
    'credentials',
    'credentials/x509',
    'group_vars/all',
    'playbooks',
]

# Files that should be created, with their contents.
SKEL_FILES = {
    'ansible.cfg': ANSIBLE_CFG_TEMPLATE,
    'Vagrantfile': VAGRANTFILE_TEMPLATE,
    'hosts.yml': '{{ inventory | toyaml }}',
    'group_vars/all/config.yml': '{{ config | toyaml }}',
    'config.yml': '''---
plugin: float
services_file: services.yml
hosts_file: hosts.yml
passwords_file: passwords.yml
credentials_dir: credentials
''',
    'credentials/x509/dhparam': '''-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAnFKabVK0PhdBAr3X+8QZp2pkD8DWsrBBnPMSF3SySVy+rW5xlfsx
Y1KiP+pEbTA4OLhdKPI4hncFv7/RamhfVq0tcNmf2kKUDxcW4dBg+C+obAc76AYn
4DyZnodSNvPab8rgNjK2O3zX5q72L5p3SRMfE5X5t3au7d7zyg9wXN2BTqxIMQUh
PuHYpiji6G3rrGMItnTuHOBr0FB+HW/J2UsB5md/rxL/HzqOQhRlFjc1+sH8VcoR
FqRAHyKEu6BNYVdfA1eWn++V2lO8BavLRCmdGGpTARoGJWaB+ckQZknM4KarmAR2
VVSaq+sWqN+ugjpj9sJ++/O1uSiUPNZdIwIBAg==
-----END DH PARAMETERS-----
''',

    # If you do not specify custom paths, services.yml / passwords.yml
    # / site.yml will include the default services only.
    'services.yml': '''---
include:
{% if services_yml_path %}
  - "{{ services_yml_path | relpath(targetdir) }}"
{% else %}
  - "{{ srcdir | relpath(targetdir) }}/services.yml.no-elasticsearch"
{% endif %}
''',
    'passwords.yml': '''---
{% if passwords_yml_path %}
- include: "{{ passwords_yml_path | relpath(targetdir) }}"
{% else %}
- include: "{{ srcdir | relpath(targetdir) }}/passwords.yml.default"
{% endif %}
''',
    'site.yml': '''---
{% for p in playbooks %}
- import_playbook: "{{ p | relpath(targetdir) }}"
{% else %}
- import_playbook: "{{ srcdir | relpath(targetdir) }}/playbooks/all.yml"
{% endfor %}
''',
}

# Internal configuration, used in the above templates.
DEFAULT_VARS = {
    # Paths, some set by command-line options.
    'srcdir': SRCDIR,
    'targetdir': None,
    'services_yml_path': None,
    'passwords_yml_path': None,
    'playbooks': [],

    # Memory for the virtual machines (MB).
    'ram': 3072,

    # Parameters for remote libvirt access.
    'libvirt': {
        'remote_host': None,
        'remote_user': None,
    },

    # Ansible inventory (hosts are created dynamically).
    'inventory': {
        'hosts': {},
        'group_vars': {
            'vagrant': {
                'ansible_user': 'vagrant',
                'ansible_become': True,
                'ansible_ssh_private_key_file': '~/.vagrant.d/insecure_private_key',
            },
        },
    },

    # Ansible configuration.
    'ansible_cfg': {
        'defaults': {
            'roles_path': '{{ srcdir | relpath(targetdir) }}/roles:roles',
            'inventory_plugins': '{{ srcdir | relpath(targetdir) }}/plugins/inventory',
            'action_plugins': '{{ srcdir | relpath(targetdir) }}/plugins/action',
            'vars_plugins': '{{ srcdir | relpath(targetdir) }}/plugins/vars',
            'callback_plugins': '{{ srcdir | relpath(targetdir) }}/plugins/callback',
            'force_handlers': True,
            'log_path': 'ansible.log',
            'retry_files_enabled': False,

            'nocows': 1,
            'display_skipped_hosts': False,
            'callback_whitelist': 'float_ci',
            'stdout_callback': 'float_ci',
            'host_key_checking': False,
            'forks': 50,
        },
        'inventory': {
            'enable_plugins': 'float',
        },
        'ssh_connection': {
            'ssh_args': '-C -o ControlMaster=auto -o ControlPersist=60s{% if libvirt.remote_host %} -o ProxyJump={{ libvirt.remote_user }}@{{ libvirt.remote_host }}{% endif %}',
            'control_path_dir': '~/.ansible/cp',
            'control_path': '%(directory)s/%%h-%%r',
            'pipelining': True,
        },
    },

    # Float configuration.
    'config': {
        # These must be set externally (from the command line).
        'domain': '',
        'domain_public': [],

        'testing': True,
        'float_debian_dist': 'bullseye',
        'net_overlays': [{
            'name': 'vpn0',
            'network': '192.168.13.0/24',
        }],
        'enable_ssh': False,
        'enable_elasticsearch': False,
        'admins': [
            {'name': 'admin',
             'email': 'admin@{{ config.domain }}',
             'password': '$s$16384$8$1$c479e8eb722f1b071efea7826ccf9c20$96d63ebed0c64afb746026f56f71b2a1f8796c73141d2d6b1958d4ea26c60a0b'}],

        # Tune for CI (low space util).
        'prometheus_tsdb_retention': '2d',
        'mariadb_innodb_log_file_size': '20M',
        'log_collector_retention_days': 2,
        'es_log_keep_days': {
            'audit': 2,
            'logstash': 2,
            'http': 2,
        },
    },
}


def _render_template(tpl, ctx):
    """Render a Jinja template using the provided context."""
    env = jinja2.Environment(
        loader=jinja2.DictLoader({'template': tpl}),
        autoescape=False)
    env.filters.update({
        'toyaml': yaml.dump,
        'relpath': os.path.relpath,
    })
    return env.get_template('template').render(ctx)


def _expand_templates(data, ctx):
    """Recursively expand templated strings in a dictionary."""
    if isinstance(data, dict):
        return dict(
            (k, _expand_templates(v, ctx)) for k, v in data.items())
    if isinstance(data, list):
        return [_expand_templates(v, ctx) for v in data]
    if isinstance(data, str) and '{{' in data:
        return _render_template(data, ctx)
    return data


def _set_var(data, dottedvar, value):
    """Set a (nested) value in a dictionary.

    The variable to be set is specified using dotted notation,
    indicating the tree leading to the actual attribute. Empty
    dictionaries are created along the way if necessary.

    """
    parts = dottedvar.split('.')
    while len(parts) > 1:
        name = parts.pop(0)
        data = data.setdefault(name, {})
    data[parts[0]] = value


def _random_hosts(num_hosts, extra_memberships):
    """Generate an inventory.

    Creates a variable number of hosts named host1...hostN, with IPs
    in a random 10.x network (starting from .10, since .1 is reserved
    for the Vagrant host itself).

    The first host will be a member of the 'frontend' group, all
    others of the 'backend' group, unless num_hosts is 1, in which
    case the only host will be part of both frontend and backend
    groups at once. Additional groups can be defined, along with their
    host memberships, in the extra_memberships dictionary.

    All hosts will be part of the 'vagrant' group, which is not used
    for scheduling but to set connection-level options that should
    only apply to VMs and not to localhost.

    """
    hosts = {}
    shard_counter = 1
    # Avoid low-numbered 10.x networks that may be used by Vagrant.
    net = '10.%d.%d' % (
        random.randint(100, 254),
        random.randint(0, 254))
    for i in range(num_hosts):
        hostname = f'host{i+1}'
        hostvars = {
            'name': hostname,
            'ansible_host': f'{net}.{i+10}',
            'ips': [f'{net}.{i+10}'],
            'ip_vpn0': f'192.168.13.{i+10}',
        }
        hostgroups = ['vagrant']
        hostgroups.extend(extra_memberships.get(hostname, []))
        if i == 0:
            hostgroups.append('frontend')
        if num_hosts == 1 or i > 0:
            hostgroups.append('backend')
            hostvars['shard_id'] = str(shard_counter)
            shard_counter += 1
        hostvars['groups'] = hostgroups
        hosts[hostname] = hostvars
    return hosts


def _parse_additional_host_groups(spec_list):
    """Parse the --additional-host-group options.

    Returns a {host: [group, ...]} membership dictionary.
    """
    memberships = {}
    for spec in spec_list:
        group, hosts = spec.split('=')
        for host in hosts.split(','):
            memberships.setdefault(host, []).append(group)
    return memberships


def _render_skel(target_dir, ctx):
    """Render the configuration to the target directory."""
    for path in SKEL_DIRS:
        full_path = os.path.join(target_dir, path)
        print(f'creating directory {full_path}')
        os.makedirs(full_path, exist_ok=True)
    for path, tpl in SKEL_FILES.items():
        full_path = os.path.join(target_dir, path)
        print(f'creating file {full_path}')
        with open(full_path, 'w') as fd:
            fd.write(_render_template(tpl, ctx))


def command_create_env(path, services, passwords, playbooks,
                       roles_path, num_hosts, additional_host_groups,
                       additional_configs, ram, domain, infra_domain,
                       extra_vars):
    all_vars = DEFAULT_VARS

    # Set paths in the internal config.
    all_vars['targetdir'] = path
    all_vars['services_yml_path'] = services
    all_vars['passwords_yml_path'] = passwords
    all_vars['playbooks'] = playbooks

    # Extend the Ansible roles_path.
    if roles_path:
        for rpath in roles_path.split(':'):
            all_vars['ansible_cfg']['defaults']['roles_path'] += \
                ':' + os.path.relpath(rpath, path)

    # Catch ValueError to handle parsing errors for composite-valued
    # options and print a friendly message.
    try:
        all_vars['inventory']['hosts'] = _random_hosts(
            num_hosts,
            _parse_additional_host_groups(additional_host_groups),
        )
    except ValueError:
        print('Unable to parse additional-host-group spec', file=sys.stderr)
        return 1

    all_vars['ram'] = ram
    all_vars['config']['domain_public'] = [domain]
    all_vars['config']['domain'] = (
        infra_domain if infra_domain else f'infra.{domain}')
    for ev in extra_vars:
        try:
            key, value = map(lambda x: x.strip(), ev.split('='))
        except ValueError:
            print('Unable to parse extra variable assignment', file=sys.stderr)
            return 1
        _set_var(all_vars, key, value)

    ctx = _expand_templates(all_vars, all_vars)
    _render_skel(path, ctx)

    # Copy any additional .yml files in place.
    for cfg_path in additional_configs:
        shutil.copy(cfg_path, os.path.join(path, 'group_vars', 'all'))


def _fix_ansible_vault_password_file():
    """Check the ANSIBLE_VAULT_PASSWORD_FILE environment var.

    If set, we modify it to point at an absolute path, to avoid
    confusion when running playbooks in different directories.

    The function does not return anything but as a side effect it might
    modify os.environ (so that the subprocess modulee will pick up the
    changes).

    """
    pwfile = os.getenv('ANSIBLE_VAULT_PASSWORD_FILE')
    if not pwfile:
        return

    if not os.path.exists(pwfile):
        raise Exception(
            'The ANSIBLE_VAULT_PASSWORD_FILE (%s) does not exist.' % (
                pwfile,))

    # Be friendly to the user and resolve tilde (~ and ~user) paths,
    # which the shell would not do otherwise in environment variables.
    # Then ensure it is an absolute path.
    pwfile = os.path.abspath(os.path.expanduser(pwfile))

    os.environ['ANSIBLE_VAULT_PASSWORD_FILE'] = pwfile


def command_run(config, playbooks,
                ansible_verbosity=0,
                ansible_check=False,
                ansible_diff=False,
                ansible_limit=None,
                ansible_extra_vars=[]):
    if not os.path.exists(config):
        raise Exception(
            'The configuration file %s does not exist!' % (config,))

    for arg in playbooks:
        if not os.path.exists(arg):
            # See if we have a stock playbook with that name.
            if not arg.endswith('.yml'):
                arg += '.yml'
            pbk = os.path.join(SRCDIR, 'playbooks', arg)
            if os.path.exists(pbk):
                arg = pbk

        print('Running playbook %s...' % (arg,))

        os.environ['LC_ALL'] = 'C'
        _fix_ansible_vault_password_file()
        cmd = [os.getenv('ANSIBLE_PLAYBOOK', 'ansible-playbook'),
               '-i', config]
        if ansible_verbosity > 0:
            cmd.append('-' + ('v' * ansible_verbosity))
        if ansible_check:
            cmd.append('--check')
        if ansible_diff:
            cmd.append('--diff')
        if ansible_limit:
            cmd.extend(['--limit', ansible_limit])
        for v in ansible_extra_vars:
            cmd.append('--extra-vars=' + v)
        cmd.append(arg)
        subprocess.check_call(cmd)


def main():
    parser = argparse.ArgumentParser(
        description='Container-based cluster management CLI.')

    subparsers = parser.add_subparsers(dest='subparser')

    help_parser = subparsers.add_parser(
        'help', help='print help')

    create_env_parser = subparsers.add_parser(
        'create-env',
        help='initialize a new environment',
        description='''Initialize a new (test) environment.

This command is primarily meant to run test environments in a CI
context: it makes a distinction between the service description ("what
to test"), read from the filesystem, and the runtime configuration
("how to test it"), controlled via command-line flags.

This command creates a new float configuration with defaults that are
suitable for a test environment, along with a Vagrant configuration
that will bring up test VMs for it. It expects to find pre-existing
services.yml, passwords.yml and site.yml files (respectively the
service metadata, the credentials metadata, and the top-level playbook
for your infrastructure). You should use the --services, --passwords
and --playbook options to specify their location, or we'll just use
float's uninteresting defaults. If your playbook includes custom
Ansible roles, use the --roles-path option to let Ansible find them.

Further configuration is available via the '-e' command-line option,
which allows you to set internal configuration variables. The internal
configuration is a dictionary with the following elements:

  libvirt: Configuration for remote libvirt usage
      remote_host: Hostname of the remote libvirt server
      remote_user: Username on the remote libvirt server
      ssh_key_file: SSH key file (in ~/.ssh/config) to use to
                    authenticate to the remote libvirt server

  ansible_cfg: Ansible configuration, split into sections, the most
               interesting one of which is 'defaults'

  config: Configuration variables for float, common to all hosts
          (i.e. variables that end up in group_vars/all)

Dotted notation is used to address elements nested in the internal
configuration dictionary, e.g.:

    -e ansible_cfg.defaults.strategy=mitogen_linear

will enable Mitogen if it's installed system-wide.

The script will auto-generate an inventory consisting of the desired
number of hosts (selected via --num-hosts), named host1...hostN, with
IPs in a randomly-selected 10.x network (starting from .10, since .1
is reserved for the Vagrant host itself).

The first host will be a member of the 'frontend' group, all others of
the 'backend' group, unless there is just a single host, in which case
it will be part of both frontend and backend groups at
once. Additional groups can be defined, along with their host
memberships, using the --additional-host-group command-line option.

''', formatter_class=argparse.RawDescriptionHelpFormatter)
    create_env_parser.add_argument(
        '--domain', metavar='DOMAIN',
        default='example.com',
        required=True,
        help='public domain to use (default: example.com)')
    create_env_parser.add_argument(
        '--infra-domain', metavar='DOMAIN',
        help='infrastructural domain to use (default: "infra." + domain)')
    create_env_parser.add_argument(
        '--services', metavar='FILE',
        help='your custom services.yml')
    create_env_parser.add_argument(
        '--passwords', metavar='FILE',
        help='your custom passwords.yml')
    create_env_parser.add_argument(
        '--playbook', metavar='FILE',
        dest='playbooks', action='append', default=[],
        help='your custom playbook(s)')
    create_env_parser.add_argument(
        '--num-hosts', metavar='N', type=int, default=3,
        help='number of VMs to create when using --vagrant (default: 3)')
    create_env_parser.add_argument(
        '--ram', metavar='MB', type=int, default=3072,
        help='RAM for each VM when using --vagrant (default: 3072)')
    create_env_parser.add_argument(
        '--additional-host-group', metavar='GROUP=HOST1[,HOST2...]',
        dest='additional_host_groups',
        action='append', default=[],
        help='specify additional host groups')
    create_env_parser.add_argument(
        '--additional-config', metavar='PATH',
        dest='additional_configs',
        action='append', default=[],
        help='specify additional config YAML files that will be copied in '
        'group_vars/all')
    create_env_parser.add_argument(
        '--roles-path', metavar='PATH[:PATH...]',
        dest='roles_path',
        help='additional path for Ansible roles')
    create_env_parser.add_argument(
        '-e', dest='extra_vars', metavar='KEY=VALUE',
        action='append', default=[],
        help='set extra variables in config (can be specified multiple times)')
    create_env_parser.add_argument(
        'path',
        metavar='PATH',
        help='target path, where the test environment config will be created')

    run_parser = subparsers.add_parser(
        'run',
        help='run Ansible playbooks',
        description='Run Ansible playbooks.')
    run_parser.add_argument(
        'playbooks', metavar='playbook', nargs='*',
        default=['site.yml'], help='Playbooks to run')
    run_parser.add_argument(
        '--config', metavar='file', default='config.yml',
        help='Path to the configuration file')
    run_parser.add_argument(
        '-v', '--verbose', dest='ansible_verbosity', action='count',
        default=0, help='Increase ansible-playbook verbosity')
    run_parser.add_argument(
        '-C', '--check', dest='ansible_check', action='store_true',
        help='Run ansible-playbook with the --check flag')
    run_parser.add_argument(
        '-D', '--diff', dest='ansible_diff', action='store_true',
        help='Run ansible-playbook with the --diff flag')
    run_parser.add_argument(
        '-e', '--extra-vars', dest='ansible_extra_vars',
        action='append', default=[],
        help='Extra variables for Ansible')
    run_parser.add_argument(
        '-l', '--limit', dest='ansible_limit',
        help='Limit to selected hosts')

    kwargs = vars(parser.parse_args())
    cmd = kwargs.pop('subparser')

    if cmd == 'help' or not cmd:
        parser.print_help()
        return

    handler = 'command_' + cmd.replace('-', '_')
    globals()[handler](**kwargs)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print("ERROR: %s" % (str(e),), file=sys.stderr)
        sys.exit(1)
