---

# Note: since we are iterating over all known services using
# 'with_subelements', we have to explicitly check if the service is
# enabled on this host.
- set_fact:
    service: "{{ item.0 }}"
    dataset: "{{ item.1 }}"
    dataset_name: "{{ item.0.name }}/{{ item.1.name }}"
    dataset_filename: "{{ item.0.name }}_{{ item.1.name }}"
    dataset_owner: "{{ item.1.get('owner', '') }}"
    dataset_group: "{{ item.1.get('group', 'root') }}"
    dataset_mode: "{{ item.1.get('mode', '0700') }}"
    dataset_path: "{{ item.1.get('path', '') }}"
    dataset_type: "{% if 'backup_command' in item.1 %}pipe{% else %}file{% endif %}"
    dataset_is_present: "{{ (item.0.name in float_enabled_services) }}"
    dataset_should_backup: "{{ (item.0.name in float_enabled_services) and ((not item.1.get('on_master_only', False)) or (item.0.get('master_host') == inventory_hostname)) }}"

- set_fact:
    dataset_should_restore: "{{ dataset_should_backup and not item.1.get('sharded', False) }}"

- name: "Create path for dataset {{ dataset_name }}"
  file:
    path: "{{ dataset_path }}"
    mode: "{{ dataset_mode | default('0700') }}"
    state: directory
  when: "(dataset_is_present) and (dataset_path) and (dataset_mode)"

# Try to set permissions. Ignore errors because it is possible that
# the user does not (yet) exist.
- name: "Set permissions for dataset directory of {{ dataset_name }}"
  file:
    path: "{{ dataset_path }}"
    state: directory
    owner: "{{ dataset_owner }}"
    group: "{{ dataset_group | default('root') }}"
  when: "(dataset_is_present) and (dataset_path) and (dataset_owner)"
  ignore_errors: true

- name: Set up configuration for dataset {{ dataset_name }} (source)
  template:
    src: "tabacco/sources/source.yml.j2"
    dest: "/etc/tabacco/sources/{{ dataset_filename }}.yml"
    mode: 0600
  when: dataset_should_backup
  notify:
    - reload backup agent

- name: Set up configuration for dataset {{ dataset_name }} (handler)
  template:
    src: "tabacco/handlers/{{ dataset_type }}.yml.j2"
    dest: "/etc/tabacco/handlers/{{ dataset_filename }}.yml"
    mode: 0600
  when: dataset_should_backup and dataset_type == 'pipe'
  notify:
    - reload backup agent

- name: Clear configuration for dataset {{ dataset_name }}
  file:
    path: "/etc/tabacco/{{ diritem }}/{{ dataset_filename }}.yml"
    state: absent
  when: not dataset_should_backup
  with_items:
    - sources
    - handlers
  loop_control:
    loop_var: diritem

- name: Create restore script
  template:
    src: "tabacco/restore-script.j2"
    dest: "/usr/lib/float/datasets/restore-{{ dataset_filename }}"
    mode: 0755
  when: dataset_should_restore

- name: Create restore service unit
  template:
    src: "tabacco/restore-service.j2"
    dest: "/etc/systemd/system/restore-{{ dataset_filename }}.service"
    mode: 0444
  when: dataset_should_restore

- name: Cleanup restore service unit
  file:
    path: "/etc/systemd/system/restore-{{ dataset_filename }}.service"
    state: absent
  when: "not dataset_should_restore"
  notify: reload systemd

- name: Enable restore service unit
  systemd:
    name: "restore-{{ dataset_filename }}.service"
    enabled: yes
  when: dataset_should_restore
  notify: reload systemd

- name: Wipe dataset restore guard file
  file:
    path: "/var/lib/float/datasets/{{ dataset_filename }}.restore_guard"
    state: absent
  when: not dataset_should_backup
