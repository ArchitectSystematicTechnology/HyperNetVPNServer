
global(
  maxMessageSize="64k"
  defaultNetstreamDriver="gtls"
  defaultNetstreamDriverCAFile="/etc/credentials/x509/log-collector/ca.pem"
  defaultNetstreamDriverCertFile="/etc/credentials/x509/log-collector/server/cert.pem"
  defaultNetstreamDriverKeyFile="/etc/credentials/x509/log-collector/server/private_key.pem"
)

# Send stats to the rsyslog-exporter process.
module(
  load="impstats"
  interval="10"
  format="json"
  resetCounters="off"
  ruleset="process_stats"
)

module(
  load="omprog"
)

ruleset(name="process_stats") {
  action(
    type="omprog"
    name="to_exporter"
    binary="/usr/bin/rsyslog_exporter -web.listen-address=:9105"
  )
}

# Template to save logs to /var/log/remote/$HOST/$PROGRAM.
template(name="TmplFile" type="list"){
  constant(value="/var/log/remote/")
  property(name="hostname")
  constant(value="/")
  property(name="programname" SecurePath="replace")
  constant(value=".log")
}

{% if enable_elasticsearch %}
# Elasticsearch output support. For simplicity, it will create indexes
# with the same naming scheme used by logstash (to simplify the Kibana
# configuration). Assemblying JSON by hand in rsyslog templates is a
# bit awkward right now, but it will get better with 8.33 (see
# http://blog.gerhards.net/2018/02/simplifying-rsyslog-json-generation.html).
# HTTP logs (the local3 syslog facility) are sent to their own
# separate index.
module(
  load="omelasticsearch"
)
template(name="esIndex" type="list") {
  constant(value="logstash-")
  property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
  constant(value=".")
  property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
  constant(value=".")
  property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}
template(name="esIndexAudit" type="list") {
  constant(value="audit-")
  property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
  constant(value=".")
  property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
  constant(value=".")
  property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}
template(name="esIndexHTTP" type="list") {
  constant(value="http-")
  property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
  constant(value=".")
  property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
  constant(value=".")
  property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}
template(name="esTemplate"
         type="list") {
  constant(value="{")
  constant(value="\"@timestamp\":\"") property(name="timereported" dateFormat="rfc3339")
  constant(value="\",\"host\":\"") property(name="hostname")
  constant(value="\",\"severity\":\"") property(name="syslogseverity-text" caseConversion="upper")
  constant(value="\",\"facility\":\"") property(name="syslogfacility-text")
  constant(value="\",\"tag\":\"") property(name="syslogtag" format="json")
  constant(value="\",\"program\":\"") property(name="programname" format="json")
  constant(value="\",\"message\":\"") property(name="msg" format="json")
  constant(value="\",")
  property(name="$!all-json" position.from="2")
}
template(name="esTemplateHTTP"
         type="list") {
  constant(value="{")
  constant(value="\"@timestamp\":\"") property(name="timereported" dateFormat="rfc3339")
  constant(value="\",\"host\":\"") property(name="hostname")
  constant(value="\",")
  property(name="$!all-json" position.from="2")
}
template(name="esTemplateJSON"
         type="list") {
  constant(value="{")
  constant(value="\"@timestamp\":\"") property(name="timereported" dateFormat="rfc3339")
  constant(value="\",\"host\":\"") property(name="hostname")
  constant(value="\",\"tag\":\"") property(name="syslogtag" format="json")
  constant(value="\",\"program\":\"") property(name="programname" format="json")
  constant(value="\",")
  property(name="$!all-json" position.from="2")
}
# Structured audit logs already contain a @timestamp field, so we
# don't have to add our own.
template(name="esTemplateAudit"
         type="list") {
  constant(value="{")
  constant(value="\"host\":\"") property(name="hostname")
  constant(value="\",")
  property(name="$!all-json" position.from="2")
}
{% endif %}

module(
  load="mmjsonparse"
)

module(
  load="mmnormalize"
)

module(
  load="mmanon"
)

# For incoming logs:
# - dump everything to file for debugging purposes
# - autodetect Lumberjack structured logs and parse them
# - forward everything to Elasticsearch
ruleset(name="incoming"){
  # Anonymize logs here.
  # TODO: whitelist the log sources that need anonymization (mail services).
  action(type="mmanon"
         ipv4.bits="32"
         ipv6.bits="128"
         embeddedipv4.bits="128")

{% if testing|default(True) %}
  # Dump everything to /var/log/remote/<host>/<prog>. This is kept for
  # debugging purposes, and in case we want to switch from ES+Kibana
  # to the simpler logviewer.
  action(type="omfile" DynaFile="TmplFile")
{% endif %}

{% if enable_elasticsearch %}
  # We shouldn't send Elasticsearch logs to Elasticsearch.
  if ($programname == "elasticsearch") then {
    stop
  }

  if (substring($msg, 1, 5) == "@cee:") then {
    action(type="mmjsonparse")
    if ($syslogfacility-text == "auth" and $programname == "audit") then {
      # Structured audit logs go to a dedicated Elasticsearch index.
      action(type="omelasticsearch"
             server="127.0.0.1"
             serverport="9200"
             template="esTemplateAudit"
             searchIndex="esIndexAudit"
             dynSearchIndex="on"
             bulkmode="on"
             maxbytes="20m"
             queue.type="linkedlist"
             queue.size="1000"
             queue.dequeuebatchsize="1000"
             action.resumeretrycount="-1")
    } else {
      # Normal structured log present in the default syslog flow. Send
      # straight to Elasticsearch, skipping the log normalization step.
      action(type="omelasticsearch"
             server="127.0.0.1"
             serverport="9200"
             template="esTemplateJSON"
             searchIndex="esIndex"
             dynSearchIndex="on"
             bulkmode="on"
             maxbytes="20m"
             queue.type="linkedlist"
             queue.size="1000"
             queue.dequeuebatchsize="1000"
             action.resumeretrycount="-1")
    }
  } else if ($syslogfacility-text == "local3") then {
    # HTTP logs from the front-end. Run it through mmnormalize to
    # convert the standard CommonLog format into JSON, then send it to
    # Elasticsearch.
    action(type="mmnormalize"
           rulebase="/etc/rsyslog-collector-lognorm/http.rb")
    # Anonymize sso_login requests by dropping the query string.
    if ($!request contains "/sso_login?") then {
      set $!request = "/sso_login?";
    }
    action(type="omelasticsearch"
           server="127.0.0.1"
           serverport="9200"
           template="esTemplateHTTP"
           searchIndex="esIndexHTTP"
           dynSearchIndex="on"
           bulkmode="on"
           maxbytes="20m"
           queue.type="linkedlist"
           queue.size="1000"
           queue.dequeuebatchsize="1000"
           action.resumeretrycount="-1")
  } else {
    # Traditional syslog message. Run it through mmnormalize to
    # extract interesting bits of metadata according to user-defined
    # patterns (a bit like logstash), then send the result as JSON to
    # Elasticsearch.

    # Apply any blacklists first.
{% for expr in log_collector_filter_exprs|default([]) %}
    if ({{ expr }}) then {
      stop
    }
{% endfor %}

    action(type="mmnormalize"
           rulebase="/etc/rsyslog-collector-lognorm/audit.rb")
    action(type="mmnormalize"
           rulebase="/etc/rsyslog-collector-lognorm/auth.rb")
    # Drop these fields as they're just duplicating the original message.
    unset $!originalmsg;
    unset $!unparsed-data;
    # Slightly silly: we have to set a variable anyway in the
    # resulting JSON otherwise the esTemplate won't be syntactially
    # valid and ES will refuse it.
    set $!ignore = "1";
    action(type="omelasticsearch"
           server="127.0.0.1"
           serverport="9200"
           template="esTemplate"
           searchIndex="esIndex"
           dynSearchIndex="on"
           bulkmode="on"
           maxbytes="20m"
           queue.type="linkedlist"
           queue.size="1000"
           queue.dequeuebatchsize="1000"
           action.resumeretrycount="-1")
  }
{% endif %}
}

module(
  load="imtcp"
  MaxSessions="500"
  StreamDriver.Name="gtls"
  StreamDriver.Mode="1"
  StreamDriver.AuthMode="x509/name"
  PermittedPeer="*.{{ domain }}"
)

input(type="imtcp" port="6514" ruleset="incoming")

