{# TODO: this macro is useless, remove these rules from production? #}
{# NOTE: auid=1000 is the vagrant user, removed to get rid of noise in tests. #}
{% macro is_real_user() %}-F auid>1000 -F auid!=4294967295{% endmacro %}

## General system rules

# Record Events That Modify Date and Time Information
{% if ansible_architecture == "x86_64" %}
-a always,exit -F arch=b64 -F uid!=ntp -S clock_settime -k time-change
-a always,exit -F arch=b64 -F uid!=ntp -S adjtimex -S settimeofday -k time-change
{% endif %}
-a always,exit -F arch=b32 -F uid!=ntp -S clock_settime -k time-change
-a always,exit -F arch=b32 -F uid!=ntp -S adjtimex -S settimeofday -S stime -k time-change
-w /etc/localtime -p wa -k time-change

# Record Events That Modify User/Group Information
-w /etc/group -p wa -k identity
-w /etc/passwd -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity

# Record Events That Modify the System's Network Environment
{% if ansible_architecture == "x86_64" %}
-a exit,always -F arch=b64 -S sethostname -S setdomainname -k system-locale
{% endif %}
-a exit,always -F arch=b32 -S sethostname -S setdomainname -k system-locale
-w /etc/issue -p wa -k system-locale
-w /etc/issue.net -p wa -k system-locale
-w /etc/hosts -p wa -k system-locale
-w /etc/network/interfaces -p wa -k system-locale

# Collect Discretionary Access Control Permission Modification Events
{% if ansible_architecture == "x86_64" %}
-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat {{ is_real_user() }} -k perm_mod
-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown {{ is_real_user() }} -k perm_mod
-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr {{ is_real_user() }} -k perm_mod
{% endif %}
-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat {{ is_real_user() }} -k perm_mod
-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown {{ is_real_user() }} -k perm_mod
-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr {{ is_real_user() }} -k perm_mod

# Collect Kernel Module Loading and Unloading
{% if ansible_architecture == "x86_64" %}
-a always,exit -F arch=b64 -F auid!=-1 -S init_module -S delete_module -k modules
{% endif %}
-a always,exit -F arch=b32 -F auid!=-1 -S init_module -S delete_module -k modules
-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
-w /etc/modprobe.conf -p wa -k modules
-w /etc/modules-load.d/ -p wa -k modules

## KExec usage (all actions)
{% if ansible_architecture == "x86_64" %}
-a always,exit -F arch=b64 -S kexec_load -k KEXEC
{% endif %}
-a always,exit -F arch=b32 -S sys_kexec_load -k KEXEC

## Creation of special files
{% if ansible_architecture == "x86_64" %}
-a exit,always -F arch=b64 -S mknod -S mknodat -k specialfiles
{% endif %}
-a exit,always -F arch=b32 -S mknod -S mknodat -k specialfiles

{% if ansible_architecture == "x86_64" %}
## 32bit API Exploitation
### If you are on a 64 bit platform, everything _should_ be running
### in 64 bit mode. This rule will detect any use of the 32 bit syscalls
### because this might be a sign of someone exploiting a hole in the 32
### bit API.
-a always,exit -F arch=b32 -S all -k 32bit-api
{% endif %}
