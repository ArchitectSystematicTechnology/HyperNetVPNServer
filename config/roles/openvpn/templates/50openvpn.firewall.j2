# Allow incoming connections to ipv4 port 80 for both udp and tcp
add_rule4 -A user-input -p tcp -m tcp -d {{ ip }} --dport 80 -j ACCEPT
add_rule4 -A user-input -p udp -m udp -d  {{ ip }} --dport 80 -j ACCEPT

{% if openvpn_network6 is defined and openvpn_network6|length -%}
# Allow incoming connections to ipv6 port 80 for both udp and tcp
add_rule6 -A user-input -p tcp -m tcp -d  {{ ip6 }} --dport 80 -j ACCEPT
add_rule6 -A user-input -p udp -m udp -d  {{ ip6 }} --dport 80 -j ACCEPT
{% endif %}

# let ipv4 vpn hosts reach the internet
add_rule4 -A FORWARD -s {{ openvpn_network | ipaddr('network/prefix') }} -o {{ ansible_default_ipv4.interface }} -j ACCEPT
# allow re/established *inbound* to vpn hosts
add_rule4 -A FORWARD -d {{ openvpn_network | ipaddr('network/prefix') }} -m state --state RELATED,ESTABLISHED -j ACCEPT

{% if openvpn_network6 is defined and openvpn_network6|length -%}
# let ipv6 vpn hosts reach the internet
add_rule6 -A FORWARD -i tun0 -o {{ ansible_default_ipv4.interface }} -s {{ openvpn_network6 }} -m state --state NEW -j ACCEPT
# allow re/established *inbound* to vpn gateways
add_rule6 -A FORWARD -i {{ ansible_default_ipv4.interface }} -m state --state RELATED,ESTABLISHED -j ACCEPT
# deny any unrelated traffic
add_rule6 -A FORWARD -i {{ ansible_default_ipv4.interface }} -o tun0 -d {{ openvpn_network6 }} -j DROP
{% endif %}

# deny v4 client-to-client communication
add_rule4 -A FORWARD -i tun0 -o tun0 -j DROP
{% if openvpn_network6 is defined and openvpn_network6|length -%}
# deny v6 client-to-client communication
add_rule6 -A FORWARD -i tun0 -o tun0 -j DROP
{% endif %}

# allow vpn clients to resolve DNS (i.e. query knot-resolver)
add_rule -A user-input -i tun0 -p udp --dport 53 -j ACCEPT
add_rule -A user-input -i tun0 -p tcp --dport 53 -j ACCEPT

