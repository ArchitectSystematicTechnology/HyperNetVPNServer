{# Generate static targets for hosts in an Ansible group #}
{% macro targets_for_group(group, port) %}
      - targets:
{% for host in groups[group]|sort %}
          - "{{ host }}.host.{{ domain }}:{{ port }}"
{% endfor %}
{% endmacro %}

{# Generate static targets for hosts in an float service #}
{% macro targets_for_service(service_name, port) %}
      - targets:
{% for host in services[service_name].hosts|sort %}
          - "{{ host }}.{{ service_name }}.{{ domain }}:{{ port }}"
{% endfor %}
{% endmacro %}

{# Generate a static_configs entry for a scrape config #}
{% macro static_configs_for_group(group, port, service_name='', extra_labels=None) %}
    static_configs:
{% if service_name %}
{{ targets_for_service(service_name, port) }}
        labels:
          service: "{{ service_name }}"
{% if extra_labels %}{% for k, v in extra_labels | dictsort %}
          {{ k }}: "{{ v }}"
{% endfor %}{% endif %}
{% else %}
{{ targets_for_group(group, port) }}
{% endif %}
    relabel_configs:
      - source_labels: [__address__]
        target_label: host
        regex: "([^.]*).*:[0-9]+"
        replacement: "${1}"
{% endmacro %}

{# Simple group-based job scrape config #}
{% macro job_static_config(job_name, group, port) %}
  - job_name: "{{ job_name }}"
{{ static_configs_for_group(group, port) }}
{% endmacro %}

{# Job scrape config for a float service. #}
{% macro job_service_config(service_name, target_config) %}
  - job_name: "{{ target_config.get('job_name', service_name) }}"
    scheme: "{{ target_config.get('scheme', 'https') }}"
{% if target_config.get('metrics_path') %}
    metrics_path: "{{ target_config['metrics_path'] }}"
{% endif %}
{% if target_config.get('scheme', 'https') == 'https' %}
    tls_config:
      ca_file: /etc/credentials/x509/prometheus/ca.pem
      cert_file: /etc/credentials/x509/prometheus/client/cert.pem
      key_file: /etc/credentials/x509/prometheus/client/private_key.pem
{% endif %}
{{ static_configs_for_group(target_config.get('group', services[service_name].group_name), target_config.port, service_name, target_config.get('labels')) }}
{% endmacro %}

global:
  scrape_interval: "{{ prometheus_scrape_interval }}"

  # Set an external label unique to this host, but remove it
  # from the generated alerts so that they match across all
  # Prometheus instances.
  external_labels:
    monitor: "{{ inventory_hostname }}"

alerting:
  alert_relabel_configs:
    - regex: monitor
      action: labeldrop
  alertmanagers:
    - static_configs:
{{ targets_for_service('prometheus', 9093) }}

scrape_configs:
{{ job_static_config('cgroups-exporter', 'all', 3909) }}
{{ job_static_config('mtail', 'all', 3903) }}
{{ job_static_config('rsyslog', 'all', 9106) }}
{{ job_static_config('auth-server', 'all', 9004) }}

{# Only scrape the backup agents if backup is configured! #}
{% if backup_repository_restic_password|default(False) %}
{{ job_static_config('backup-agent', 'all', 5331) }}
{% endif %}

{# The configuration for the node exporter drops some metrics with large cardinality. #}
{{ job_static_config('node', 'all', 9100) }}
    metric_relabel_configs:
      - source_labels: [name]
        regex: ".*\\.(path|scope|slice|socket|target|timer)"
        action: drop


{# Iterate over monitoring endpoints of all services. #}
{% for service_name, service in services | dictsort %}
  {%- for target_config in service.get('monitoring_endpoints', []) %}
{{ job_service_config(service_name, target_config) }}
  {%- endfor %}
{% endfor %}


{# Blackbox probes #}
{% for prober_host in services['prometheus'].hosts|sort %}
{% set prober_idx = loop.index %}

  - job_name: "prober_ping_{{ loop.index }}"
    metrics_path: "/probe"
    params:
      module:
        - ping
    relabel_configs:
      - source_labels: [__address__]
        target_label: host
        regex: "([^.]*).*"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.prometheus.{{ domain }}:9115
      - target_label: prober_host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{% for host in groups['all']|sort %}
        - "{{ host }}"
{% endfor %}
        labels:
          zone: internal
          probe: ping
          probeset: base
          prober_float_service: prometheus

  - job_name: "prober_https_{{ prober_idx }}"
    metrics_path: "/probe"
    params:
      module:
        - http_base
    relabel_configs:
      - source_labels: [__address__]
        target_label: host
        regex: "https?://([^.:/]*).*"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.prometheus.{{ domain }}:9115
      - target_label: prober_host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{% for host in services['frontend'].hosts|sort %}
        - "https://{{ host }}/"
{% endfor %}
        labels:
          zone: public
          probe: https
          probeset: base
          prober_float_service: prometheus

  - job_name: "prober_dns_{{ prober_idx }}"
    metrics_path: "/probe"
    params:
      module: [dns_toplevel]
    relabel_configs:
      - source_labels: [__address__]
        target_label: host
        regex: "([^.]*).*"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.prometheus.{{ domain }}:9115
      - target_label: prober_host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{% for host in services['frontend'].hosts|sort %}
        - "{{ host }}"
{% endfor %}
        labels:
          zone: public
          probe: dns
          probeset: base
          prober_float_service: prometheus

{% endfor %}

{# Additional blackbox probers #}
{% for p in prometheus_additional_blackbox_probers | default([]) | sort(attribute='name') %}
{% for prober_host in services[p.service].hosts | sort %}
  - job_name: "prober_{{ p.name }}_{{ loop.index }}"
    metrics_path: "/probe"
    params:
      module:
        - {{ p.module | default(p.name) }}
    relabel_configs:
      - source_labels: [__address__]
        target_label: host
        regex: "{{ p.target_label_regex | default('(?:https?://)?([^.:/]*).*') }}"
        replacement: "${1}"
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ prober_host }}.{{ p.service }}.{{ domain }}:{{ p.port }}
      - target_label: prober_host
        replacement: {{ prober_host }}
    static_configs:
      - targets:
{#
 # Defining arbitrary blackbox targets is complicated, also
 # we want to give the option to target a float service with
 # a simple specification. So we provide a few options:
 # - caller provides a list of hosts, or a float service
 # - caller provides a regexp to turn the hosts into targets
 #}
{% set custom_blackbox_targets = p.targets if p.targets is defined else services[p.get('target_service', 'frontend')].hosts %}
{% for target in custom_blackbox_targets %}
          - "{{ target | regex_replace('^(.*)$', p.target_regex | default('\\1')) }}"
{% endfor %}
        labels:
          zone: {{ p.zone | default('public') }}
          probe: {{ p.name }}
          probeset: custom
          prober_float_service: {{ p.service }}
{% endfor %}
{% endfor %}

{# External targets #}
{% for target in prometheus_external_targets|default([])|sort(attribute='name') %}
  - job_name: "{{ target.name }}"
    scheme: "{{ target.scheme | default('http') }}"
    metrics_path: "{{ target.metrics_path | default('/metrics') }}"
    static_configs:
      - targets: {{ target.targets | to_json }}
        labels:
          zone: external
{% if target.basic_auth|default([]) %}
    basic_auth: {{ target.basic_auth | to_json }}
{% endif %}
{% if target.bearer_token|default([]) %}
    bearer_token: {{ target.bearer_token | to_json }}
{% endif %}
{% if target.tls_config|default([]) %}
    tls_config: {{ target.tls_config | to_json }}
{% endif %}
    relabel_configs:
      - source_labels: [__address__]
        target_label: host
        regex: "([^.]*).*:[0-9]+"
        replacement: "${1}"
{% endfor %}

{# Federated external targets #}
{% if prometheus_federated_targets|default([]) %}
  - job_name: "prometheus-federation"
    honor_labels: true
    metrics_path: "/federate"
    params:
      "match[]":
        - '{__name__=~".+"}'
    metric_relabel_configs:
      # Drop replica label 'monitor' to get unique metrics
      - action: labeldrop
        regex: monitor
      # Drop high cardinality metrics
      - source_labels: ['__name__']
        regex: "node_systemd_unit_state"
        action: drop
    static_configs:
      - targets: {{ prometheus_federated_targets | to_json }}
{% endif %}

rule_files:
  - /etc/prometheus/rules/*.yml

