#!/bin/sh
#
#  Run a command *inside* a running container.
#

usage() {
    cat <<EOF
Usage: $0 [--root] <container-name> <command> [<args>...]
Run a command inside a running container.

Known options:

  --root        Do not setuid to the container user, run
                the command as the container root instead.
  -i, --interactive
                Keep STDIN open and allocate a pseudo-TTY.

EOF
}

usage_err() {
    echo "$*" >&2
    echo "Try running '$0 --help' for help" >&2
    exit 2
}

opt_root=0
docker_opts=
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        --root)
            opt_root=1
            ;;
        -i|--interactive)
            docker_opts="${docker_opts} -it"
            ;;
        -*)
            usage_err "Unknown option $1"
            ;;
        *)
            break
            ;;
    esac
    shift
done

if [ $# -lt 1 ]; then
    usage_err "Not enough arguments"
fi

container_name="$1"
shift

if [ $opt_root -eq 0 ]; then
    # Find the user that the container is running as.
    container_uidgid=$(podman inspect -f '{{ '{{' }}.Config.User{{ '}}' }}' ${container_name})
    if [ -n "${container_uidgid}" ]; then
        # If we haven't found a user, it could be that the container
        # itself is running as root. If the container does not exist,
        # the 'docker exec' command will report an error anyway.
        docker_opts="${docker_opts} --user ${container_uidgid}"
    fi
fi

exec {{ container_runtime }} exec ${docker_opts} ${container_name} "$@"
