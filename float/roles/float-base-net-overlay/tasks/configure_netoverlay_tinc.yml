---

- set_fact:
    tinc_net: "{{ item }}"
    tinc_dir: "/etc/tinc/{{ item }}"
    tinc_host_ip: "{{ hostvars[inventory_hostname]['ip_' + item] }}"
    net_overlay_config: "{{ net_overlays | selectattr('name', 'eq', item) | first }}"

- set_fact:
    tinc_host_ip_cidr: "{{ tinc_host_ip }}/{{ net_overlay_config.network | regex_replace('^.*/', '') }}"

- name: Install the tinc package
  apt:
    name: tinc
    state: present

- file: path="{{ tinc_dir }}" state=directory
- file: path="{{ tinc_dir }}/hosts" state=directory

- name: Generate tinc host key
  shell: "tincd --net={{ tinc_net }} --generate-keys </dev/null"
  args:
    creates: "{{ tinc_dir }}/rsa_key.pub"

- name: Fetch tinc host public key
  slurp:
    src: "{{ tinc_dir }}/rsa_key.pub"
  register: tinc_host_public_key
  check_mode: no

- name: Generate tinc host configuration
  set_fact:
    tinc_host_config: |
      {% for ip in ips %}
      Address = {{ ip }}
      {% endfor %}
      Port = {{ net_overlay_config.port | default('655') }}
      Cipher = {{ net_overlay_config.cipher | default('aes-128-cbc') }}
      Digest = {{ net_overlay_config.digest | default('sha256') }}
      Compression = {{ net_overlay_config.compression | default('0') }}
      PMTU = {{ net_overlay_config.pmtu | default('1460') }}
      Subnet = {{ tinc_host_ip }}/32
      {{ tinc_host_public_key['content'] | b64decode }}

# Generate tinc host entries for all *other* hosts. Skip if for
# some reason (failures) we weren't able to fetch it.
- name: Install tinc host configuration
  copy:
    dest: "{{ tinc_dir}}/hosts/{{ h | regex_replace('-', '_') }}"
    content: "{{ hostvars[h]['tinc_host_config'] }}"
  loop: "{{ groups['overlay_' + tinc_net] | list }}"
  loop_control:
    loop_var: h
  when: "'tinc_host_config' in hostvars[h]"
  register: tinc_config_hosts

- name: "Create tinc@{{ tinc_net }} configuration"
  template:
    src: "tinc/{{ f }}.j2"
    dest: "{{ tinc_dir }}/{{ f }}"
    mode: 0755
  loop:
    - tinc.conf
    - tinc-up
    - tinc-down
  loop_control:
    loop_var: f
  register: tinc_config

- name: "Enable systemd service tinc@{{ tinc_net }}"
  systemd:
    name: "tinc@{{ tinc_net }}.service"
    state: started
    enabled: yes
    masked: no

# Need an explicit restart with the named service (so can't easily use a handler).
- name: "Restart tinc@{{ tinc_net }}"
  systemd:
    name: "tinc@{{ tinc_net }}.service"
    state: restarted
    enabled: yes
    masked: no
  when: "tinc_config.changed or tinc_config_hosts.changed"

- name: "Install firewall rules for {{ tinc_net }}"
  template:
    src: "firewall/{{ f.src }}"
    dest: "/etc/firewall/{{ f.dest }}"
  notify: "reload firewall"
  loop:
    - src: "11net-overlay.j2"
      dest: "filter.d/11net-overlay-{{ tinc_net }}"
    - src: "11net-overlay-raw.j2"
      dest: "raw.d/11net-overlay-{{ tinc_net }}"
  loop_control:
    loop_var: f
