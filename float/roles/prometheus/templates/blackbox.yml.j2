modules:

  # Healthcheck probe to use on internal targets.
  http_health:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: []
      method: GET
      fail_if_ssl: false
      fail_if_not_ssl: false
      fail_if_not_matches_regexp:
        - "OK"
      preferred_ip_protocol: ip4
      tls_config:
        ca_file: /etc/credentials/x509/prometheus/ca.pem
        cert_file: /etc/credentials/x509/prometheus/client/cert.pem
        key_file: /etc/credentials/x509/prometheus/client/private_key.pem
        insecure_skip_verify: false

  # Base HTTPS probe that will not verify certificates, used
  # only to check that NGINX is up and running.
  http_base:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: [200]
      method: GET
      fail_if_ssl: false
      fail_if_not_ssl: true
      preferred_ip_protocol: ip4
      tls_config:
        insecure_skip_verify: true

{% for custom_probe in prometheus_custom_blackbox_probes.get('http', []) %}
  http_{{ custom_probe.name }}:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: [200, 301, 302, 307]
      method: GET
      headers:
        Host: "{{ custom_probe.host }}"
      fail_if_ssl: false
      fail_if_not_ssl: true
{% if custom_probe.regexp is defined %}
      fail_if_not_matches_regexp:
        - "{{ custom_probe.regexp }}"
{% endif %}
      preferred_ip_protocol: ip4
      tls_config:
        server_name: "{{ custom_probe.host }}"
        ca_file: /etc/ssl/certs/ca-certificates.crt
        insecure_skip_verify: false
{% endfor %}

  ping:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: ip4

  dns_toplevel:
    prober: dns
    timeout: 5s
    dns:
      preferred_ip_protocol: ip4
      query_name: "{{ domain_public[0] }}"
      query_type: "A"
      valid_rcodes:
        - "NOERROR"

  # Standard protocol-oriented probes to be used with prometheus_custom_blackbox_probes.
  imap_starttls:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: ip4
      query_response:
        - expect: "OK.*STARTTLS"
        - send: ". STARTTLS"
        - expect: "OK"
        - starttls: true
        - send: ". capability"
        - expect: "CAPABILITY IMAP4rev1"
      tls_config:
        insecure_skip_verify: true

  imap_tls:
    prober: tcp
    timeout: 5s
    tcp:
      tls: true
      preferred_ip_protocol: ip4
      query_response:
        - expect: "OK.*"
      tls_config:
        insecure_skip_verify: true

  smtp_starttls:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: ip4
      query_response:
        - expect: "^220 ([^ ]+) ESMTP (.+)$"
        - send: "EHLO prober"
        - expect: "^250-STARTTLS"
        - send: "STARTTLS"
        - expect: "^220"
        - starttls: true
        - send: "EHLO prober"
        - expect: "^250-AUTH"
        - send: "QUIT"
      tls_config:
        insecure_skip_verify: true

  smtp_tls:
    prober: tcp
    timeout: 5s
    tcp:
      tls: true
      preferred_ip_protocol: ip4
      query_response:
        - expect: "^220 ([^ ]+) ESMTP (.+)$"
        - send: "QUIT"
      tls_config:
        insecure_skip_verify: true
