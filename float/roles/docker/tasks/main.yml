---

# TODO: switch to keyserver once the apt_key --no-tty bug in Ansible is fixed.
- name: Install docker.com GPG key
  apt_key:
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    url: https://download.docker.com/linux/debian/gpg
    state: present

- name: Install docker.com package repository
  apt_repository:
    repo: "deb [arch=amd64] {% if apt_proxy is defined %}http://{{ apt_proxy }}/HTTPS/{% else %}https:{% endif %}//download.docker.com/linux/debian stretch stable"
    state: present

- file:
    path: "/etc/docker"
    state: directory

- name: Configure docker daemon
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
  notify:
    - restart docker

- name: Install docker packages
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - docker-ce
      - systemd-docker

- name: Login to the Docker registry
  command: docker login -u "{{ docker_registry_username }}" -p "{{ docker_registry_password }}" "{{ docker_registry_url }}"
  changed_when: False
  when: "docker_registry_url != ''"

- name: Create docker scripts dir
  file:
    path: /usr/lib/float/docker
    state: directory

- include_tasks: start.yml
  with_items: "{{ float_enabled_containers }}"

# Grab the list of currently running containers, and stop / cleanup
# the ones that are not specified in services.yml.

- name: Get list of running containers
  command: "docker ps --format={% raw %}'{{.Names}}'{% endraw %}"
  changed_when: False
  check_mode: no
  register: docker_running_containers

- set_fact:
    enabled_container_tags: "{{ float_enabled_containers | map(attribute='tag') | list }}"

- systemd:
    name: "docker-{{ item }}"
    state: stopped
    enabled: no
  with_items:
    - "{{ docker_running_containers.stdout_lines }}"
  when: "item not in enabled_container_tags"
  ignore_errors: true

- file:
    path: "/var/lib/prometheus/node-exporter/container-{{ item }}.prom"
    state: absent
  with_items:
    - "{{ docker_running_containers.stdout_lines }}"
  when: "item not in enabled_container_tags"
  ignore_errors: true

- name: Install docker cleanup script
  template:
    src: cleanup.sh.j2
    dest: /usr/local/bin/docker-cleanup
    mode: 0755

- name: Install docker cleanup cron job
  copy:
    dest: /etc/cron.d/docker-cleanup
    content: "33 */3 * * * root runcron --quiet /usr/local/bin/docker-cleanup\n"
    mode: 0644

- name: Install in-container script
  copy:
    src: in-container
    dest: /usr/local/bin/in-container
    mode: 0755
