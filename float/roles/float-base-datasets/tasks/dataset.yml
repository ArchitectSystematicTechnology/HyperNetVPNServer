---

# Note: since we are iterating over all known services using
# 'with_subelements', we have to explicitly check if the service is
# enabled on this host.
- set_fact:
    service: "{{ item.0 }}"
    dataset: "{{ item.1 }}"

- set_fact:
    dataset_name: "{{ service.name }}/{{ dataset.name }}"
    dataset_tag: "{{ service.name }}_{{ dataset.name }}"
    dataset_desired_owner: "{{ dataset.get('owner', '') }}"
    dataset_owner: "root"
    dataset_group: "{{ dataset.get('group', 'root') }}"
    dataset_mode: "{{ dataset.get('mode', '0700') }}"
    dataset_path: "{{ dataset.get('path', '') }}"
    dataset_driver: "{{ dataset.get('type', 'tabacco') }}"
    dataset_is_present: "{{ (service.name in float_enabled_services) }}"
    dataset_should_backup: "{{ (service.name in float_enabled_services) and ((not dataset.get('on_master_only', False)) or (service.get('master_host') == inventory_hostname)) }}"

- set_fact:
    dataset_should_restore: "{{ dataset_should_backup and not dataset.get('sharded', False) }}"
    dataset_restore_unit: "restore-{{ dataset_tag }}.service"

- name: "Create path for dataset {{ dataset_name }}"
  file:
    path: "{{ dataset_path }}"
    mode: "{{ dataset_mode | default('0700') }}"
    state: directory
  when: "(dataset_is_present) and (dataset_path) and (dataset_mode)"

# Attempt to set permissions on the dataset path, but first check if
# the user already exists: if the service is not container-based, it's
# possible that the user will be created on package installation later.
- name: Check if the dataset owner exists
  getent:
    database: passwd
    key: "{{ dataset_desired_owner }}"
    fail_key: false
  when: "(dataset_is_present) and (dataset_path) and (dataset_desired_owner)"

# Make it so that 'dataset_owner' is always safe to use.
- set_fact:
    dataset_owner: "{{ dataset_desired_owner }}"
  when: "dataset_is_present and dataset_path and dataset_desired_owner and getent_passwd.get(dataset_desired_owner)"

- name: "Set permissions for dataset directory of {{ dataset_name }}"
  file:
    path: "{{ dataset_path }}"
    state: directory
    owner: "{{ dataset_owner }}"
    group: "{{ dataset_group }}"
  when: "dataset_is_present and dataset_path and dataset_desired_owner"

- include_tasks: dataset_tabacco.yml
  when: "dataset_driver == 'tabacco'"

- include_tasks: dataset_litestream.yml
  when: "dataset_driver == 'litestream'"

# Set up a restore unit that will need to run before the main service
# units (via a Before= clause) to restore data from backups, if any.
# These units run a driver-dependent restore script, that is protected
# by a "guard file", to ensure that the restore script is only run
# once, whenever the service is newly scheduled on a host.
- name: Create restore service unit
  template:
    src: "restore-service.j2"
    dest: "/etc/systemd/system/{{ dataset_restore_unit }}"
    mode: 0644
  when: dataset_should_restore

- name: Create restore script
  template:
    src: "{{ dataset_driver }}-restore-script.j2"
    dest: "/usr/lib/float/datasets/restore-{{ dataset_tag }}"
    mode: 0755
  when: dataset_should_restore

- name: Enable restore service unit
  systemd:
    name: "{{ dataset_restore_unit }}"
    enabled: yes
    daemon_reload: yes
  when: dataset_should_restore

- name: Disable restore service unit
  systemd:
    name: "{{ dataset_restore_unit }}"
    enabled: no
  when: "(not dataset_should_restore) and (dataset_restore_unit in loaded_backup_systemd_units.stdout_lines)"

- name: Cleanup restore service unit
  file:
    path: "/etc/systemd/system/{{ dataset_restore_unit }}"
    state: absent
  when: not dataset_should_restore
  notify: reload systemd

- name: Wipe dataset restore guard file
  file:
    path: "/var/lib/float/datasets/{{ dataset_tag }}.restore_guard"
    state: absent
  when: not dataset_should_backup
