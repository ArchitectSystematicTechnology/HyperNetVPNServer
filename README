Getting started

0. Install the float and LEAP platform pre-requisites:

    # sudo apt-get install golang bind9utils python3-pysodium python3-jinja2 ansible git
    $ go get -u git.autistici.org/ale/x509ca
    $ go get -u git.autistici.org/ale/ed25519gen
    $ export PATH=$PATH:$HOME/go/bin

1. Clone the float repository and enter it:

    $ git clone https://0xacab.org/leap/container-platform/float
    $ cd float
    
2. initialize the ansible vault by creating a password and then setting
ANSIBLE_VAULT_PASSWORD_FILE= to the location of where the file is:

    $ tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 26 > .ansible_vault_pw

Optionally: gpg encrypt this file, so only trusted admins can read it. If you
do *not* encrypt this file, then this repository should not be shared anywhere
public:
    $ gpg -e .ansible.vault_pw ; rm .ansible.vault_pw

Configure your local environment to know where the ansible vault password is
located:
    $ export ANSIBLE_VAULT_PASSWORD_FILE=.ansible_vault_pw

NOTE: if you performed the optional encryption step above, you will
need to add .gpg to the end of the file name below:
    $ export ANSIBLE_VAULT_PASSWORD_FILE=.ansible_vault_pw.gpg

This environment variable will only be set for this shell, you will need to add
it to your shell environment initialization file so it will be set automatically
everytime.

3. Customize the environment by editing hosts.yaml. Change 'floatpp1' to your
app host's hostname, and specify the ansible_host and ip values to be the IP
addresses for that host. If you have more than one app server, then you would
just create a copy of this block, modifying the values, being sure to keep the
'backend' group assigned to each one.

Configure the front-end reverse proxy with in the same way, change the
'floatrp1' hostname to your hostname, and the ansible_host and ip to the IP it
should have, and set the location value to where this server is located. For the
gateway_address, put the secondary gateway ip.

Then edit group_vars/all/config.yml, gateway_config.yml, provider_config.yml
to match your environment. Note that the config.yml contains a list of admins, a
default hashed password, and a set of ssh keys that will be able to connect to
the system as root. If you do not change this password, then the user 'admin'
and password 'password' are used.

4. generate credentials by running the init-credentials playbook. This will
ansible-vault-encrypt the resulting secret files under credentials/. Note: this
is not the built-in float init-credentials, rather this is the LEAP provided
one, which will instantiate the float init-credentials when it is finished.

    $ float/float run playbooks/init-credentials

You should not see any *red* text in this process, if you do, stop now.

5. Consider comitting the generated credentials to git, and pushing them to a
repository. The secret material is encrypted with ansible-vault, so it cannot be
read without the access to the .ansible_vault_pw. If you commit these files, and
push them to a respository, then you can share them with other admins, but be
aware that these are secrets that should not be shared with anyone but trusted
admins. If you gpg encrypted the .ansible_vault_pw, then that file is also
encrypted and could also be committed.

6. Be sure you can ssh to the hosts as root with a public key that will not be
prompting you for a password every time; you should have also verified and
accepted the correct host key.

7. Deploy the configuration by running float/float run site.yml. This will take
some time to finish, as it needs to download packages and Docker images and
configure everything.



Testing
-------
Certificate authority from provider: leap.ca
Make a CSR/key
sign cert against CA
make sure the x509 v3 extensions exist: x509.ExtKeyUsageClientAuth x509.KeyUsageDigitalSignature
     $ /usr/sbin/openvpn --client --remote-cert-tls server --tls-client --remote 37.218.241.84 1194 --proto tcp --verb 3 --auth SHA1 --keepalive 10 30 --tls-version-min 1.0 --dev tun --tun-ipv6 --ca ./ca.pem --cert ./testopenvpn.crt --key ./testopenvpn.key

Reference: https://0xacab.org/leap/vpnweb/blob/master/certs.go#L37

                ExtKeyUsage: []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},
                KeyUsage:    x509.KeyUsageDigitalSignature,
                CommonName: UNLIMITED
                subjectkeyID: random
                serial: random

Integration Testing
Integration tests can be run to:
            * check that public endpoints for built-in services are reachable
            * check that no Prometheus alerts are firing

These tests can be run from your Ansible directory using the *float*
command-line tool:

```shell
/path/to/float/float run integration-test
```

The test suite requires a small amount of configuration in order to
run on a non-test environment, as it needs admin credentials in order
to automatically test SSO-protected services. This is stored in a YAML
file, you can point the test suite at your own test parameters using
the `TEST_PARAMS` environment variable, e.g.:

```shell
env TEST_PARAMS=my-params.yml /path/to/float/float run integration-test
```

The built-in test parameters configuration uses the credentials for
the default admin user used in test environments (*admin*/*password*):

```yaml
---
priv_user:
  name: admin
  password: password
```


Testing float:
        # apt install qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils vagrant vagrant-libvirt
        # adduser micah libvirt
        # adduser micah libvirt-quemu
        $ float create-env --vagrant --num-hosts 2 test
        $ cd test; vagrant up


Why is there a '[openvpn]' group, but no host attached to it?

You might have noticed that site.yml has a hosts parameter with roles assigned
to them, and the actual hosts defined in site.yml are connected to the hosts.yml
groups parameter. The hosts.yml has floatrp1 with the groups: [frontend], but
there is no host which has the '[openvpn]' group attached to it.

For the 'openvpn' service, there is a scheduling_group, which sets the *scope*
of the possible hosts that the service will be scheduled onto. Float will create
automatically a 'openvpn' group, containing just the hosts that 'openvpn' is
running on. We did not define an 'openvpn' group in the hosts.yml ansible
inventory, yet such a group is automatically created by float, and you can use
it in Ansible. This 'openvpn' group is a subset of the scheduling_group.

"where can I run openvpn" -> scheduling_group (frontend)
"where is openvpn actually running" -> "openvpn" group

