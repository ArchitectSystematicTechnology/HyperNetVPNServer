---

"@ns":
  _:
{% for h in services['dns'].hosts | sort %}
{% set host_ip4 = hostvars[h]['public_ips'] | ansible.utils.ipv4 %}
{% set host_ip6 = hostvars[h]['public_ips'] | ansible.utils.ipv6 %}
{% if host_ip4 %}
    - NS ns{{ loop.index }}.{{ mx_ns_domain }}.
{% endif %}
{% if host_ip6 %}
    - NS ns{{ loop.index }}-v6.{{ mx_ns_domain }}.
{% endif %}
{% endfor %}
{% if dns_caa_record is defined %}
    - "CAA {{ dns_caa_record | regex_replace('\"', '\\\"') }}"
{% endif %}

"@base":
  EXTENDS: "@ns"
  _:
    - $FRONTENDS4
    - AAAA $FRONTENDS6

{#
 # We create a short-ttl DNS zone as "l.{{ domain }}" for all the public domains.
 # This can be used as the primary load-balanced short-lived CNAME for services.
 #}
{% for d in domain_public %}

{% if not d.endswith('.onion') %}
{{ d }}:
  EXTENDS: "@base"
  www: CNAME www.l.{{ d }}.
  # The explicit NS delegation for 'l' is necessary for dnssec-sign to work properly.
  l:
{% for h in services['dns'].hosts | sort %}
{% set host_ip4 = hostvars[h]['public_ips'] | ansible.utils.ipv4 %}
{% set host_ip6 = hostvars[h]['public_ips'] | ansible.utils.ipv6 %}
{% if host_ip4 %}
    - NS ns{{ loop.index }}.{{ mx_ns_domain }}.
{% endif %}
{% if host_ip6 %}
    - NS ns{{ loop.index }}-v6.{{ mx_ns_domain }}.
{% endif %}
{% endfor %}

{% if d == mx_ns_domain %}
{# Only generate the nameservers' A records on the chosen zone #}
{% for h in services['dns'].hosts | sort %}
{% set host_ip4 = hostvars[h]['public_ips'] | ansible.utils.ipv4 %}
{% set host_ip6 = hostvars[h]['public_ips'] | ansible.utils.ipv6 %}
{% if host_ip4 %}
  ns{{ loop.index }}: {{ host_ip4 | to_json }}
{% endif %}
{% if host_ip6 %}
  ns{{ loop.index }}-v6: {{ host_ip6 | map('regex_replace', '^', 'AAAA ') | list | to_json }}
{% endif %}
  mx{{ loop.index }}: {{ (host_ip4 + (host_ip6 | map('regex_replace', '^', 'AAAA ') | list)) | to_json }}
{% endfor %}
{% endif %}

{% endif %}

{% for service_name, s in services|dictsort %}
{# Iterate over the HTTP endpoints #}
{% for pe in s.get('public_endpoints', []) if pe.get('name') and not pe.get('skip_dns', False) %}
  {{ pe.name }}: CNAME www.l.{{ d }}.
{% if pe.get('sharded') %}
{% for h in services[service_name].hosts|sort %}
  {{ hostvars[h]['shard_id'] }}.{{ pe.name }}: CNAME www.l.{{ d }}.
{% endfor %}
{% endif %}
{% endfor %}

{# Iterate over the TCP endpoints (those that have a name) #}
{% for te in s.get('public_tcp_endpoints', []) if te.get('name') and not te.get('skip_dns', False) %}
  {{ te.name }}: CNAME www.l.{{ d }}.
{% endfor %}

{# Iterate over the endpoints of other kind #}
{% for oe in s.get('public_other_endpoints', []) if oe.get('name') and not oe.get('skip_dns', False) %}
  {{ oe.name }}: CNAME www.l.{{ d }}.
{% endfor %}
{% endfor %}

l.{{ d }}:
  EXTENDS: "@ns"
  TTL: 30
  www:
    - $FRONTENDS4
    - AAAA $FRONTENDS6

{% endfor %}
